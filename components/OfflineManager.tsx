import React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, Alert } from 'react-native';\nimport NetInfo from '@react-native-community/netinfo';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { colors } from '@/constants/colors';\nimport { spacing } from '@/constants/spacing';\nimport { typography } from '@/constants/typography';\nimport { useSpiritualStore } from '@/store/spiritual-store';\n\ninterface OfflineData {\n  dailyVerses: any[];\n  biblicalContent: any[];\n  bibleChapters: any[];\n  lastSync: string;\n}\n\nexport const OfflineManager: React.FC = () => {\n  const [isOnline, setIsOnline] = useState(true);\n  const [offlineData, setOfflineData] = useState<OfflineData | null>(null);\n  \n  const content = useSpiritualStore((state) => state.content);\n  const dailyVerse = useSpiritualStore((state) => state.getDailyVerse());\n\n  useEffect(() => {\n    const unsubscribe = NetInfo.addEventListener(state => {\n      const wasOffline = !isOnline;\n      const isNowOnline = state.isConnected ?? false;\n      \n      setIsOnline(isNowOnline);\n      \n      if (wasOffline && isNowOnline) {\n        // Back online - sync data\n        syncOfflineData();\n      } else if (!isNowOnline) {\n        // Gone offline - prepare offline data\n        prepareOfflineData();\n      }\n    });\n\n    return () => unsubscribe();\n  }, [isOnline]);\n\n  const prepareOfflineData = async () => {\n    try {\n      const offlineData: OfflineData = {\n        dailyVerses: [dailyVerse],\n        biblicalContent: content.slice(0, 20), // Cache first 20 items\n        bibleChapters: [], // Would cache essential chapters\n        lastSync: new Date().toISOString(),\n      };\n      \n      await AsyncStorage.setItem('offlineData', JSON.stringify(offlineData));\n      setOfflineData(offlineData);\n      \n      console.log('Offline data prepared');\n    } catch (error) {\n      console.error('Error preparing offline data:', error);\n    }\n  };\n\n  const syncOfflineData = async () => {\n    try {\n      const storedData = await AsyncStorage.getItem('offlineData');\n      if (storedData) {\n        const data: OfflineData = JSON.parse(storedData);\n        setOfflineData(data);\n        \n        // Here you would sync any offline changes back to the server\n        console.log('Syncing offline data...');\n        \n        Alert.alert(\n          'Connexion rÃ©tablie',\n          'Vos donnÃ©es ont Ã©tÃ© synchronisÃ©es avec succÃ¨s.',\n          [{ text: 'OK' }]\n        );\n      }\n    } catch (error) {\n      console.error('Error syncing offline data:', error);\n    }\n  };\n\n  const loadOfflineData = async () => {\n    try {\n      const storedData = await AsyncStorage.getItem('offlineData');\n      if (storedData) {\n        const data: OfflineData = JSON.parse(storedData);\n        setOfflineData(data);\n        return data;\n      }\n    } catch (error) {\n      console.error('Error loading offline data:', error);\n    }\n    return null;\n  };\n\n  if (!isOnline) {\n    return (\n      <View style={styles.offlineBar}>\n        <Text style={styles.offlineText}>\n          ðŸ“± Mode hors ligne - Contenu limitÃ© disponible\n        </Text>\n      </View>\n    );\n  }\n\n  return null;\n};\n\nconst styles = StyleSheet.create({\n  offlineBar: {\n    backgroundColor: colors.warning,\n    paddingVertical: spacing.sm,\n    paddingHorizontal: spacing.md,\n    alignItems: 'center',\n  },\n  offlineText: {\n    fontSize: typography.fontSizes.sm,\n    color: colors.white,\n    fontWeight: '500',\n  },\n});\n\nexport default OfflineManager;