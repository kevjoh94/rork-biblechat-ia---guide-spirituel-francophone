import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Switch,\n  Modal,\n  TextInput,\n  Alert,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { \n  Settings, \n  User, \n  Heart, \n  BookOpen, \n  MessageCircle, \n  Trophy, \n  Star, \n  Calendar,\n  Moon,\n  Sun,\n  Bell,\n  Edit3,\n  Crown,\n  Target,\n  Zap\n} from 'lucide-react-native';\nimport { colors } from '@/constants/colors';\nimport { spacing } from '@/constants/spacing';\nimport { typography } from '@/constants/typography';\nimport { useSpiritualStore } from '@/store/spiritual-store';\nimport { AchievementBadge } from '@/components/AchievementBadge';\n\nexport const EnhancedProfile: React.FC = () => {\n  const [showSettings, setShowSettings] = useState(false);\n  const [showEditProfile, setShowEditProfile] = useState(false);\n  const [userName, setUserName] = useState('Utilisateur Spirituel');\n  const [userBio, setUserBio] = useState('Chercheur de v√©rit√©');\n  \n  const stats = useSpiritualStore((state) => state.stats);\n  const favorites = useSpiritualStore((state) => state.getFavorites());\n  const chatHistory = useSpiritualStore((state) => state.chatHistory);\n  const achievements = useSpiritualStore((state) => state.achievements);\n  const isDarkMode = useSpiritualStore((state) => state.isDarkMode);\n  const notifications = useSpiritualStore((state) => state.notifications);\n  const toggleDarkMode = useSpiritualStore((state) => state.toggleDarkMode);\n  const updateNotificationSettings = useSpiritualStore((state) => state.updateNotificationSettings);\n  const journalEntries = useSpiritualStore((state) => state.journalEntries);\n  const meditationSessions = useSpiritualStore((state) => state.meditationSessions);\n  const readingPlans = useSpiritualStore((state) => state.readingPlans);\n  const clearChatHistory = useSpiritualStore((state) => state.clearChatHistory);\n  \n  // Calculate level progress\n  const currentLevelExp = stats.experience % 100;\n  const levelProgress = (currentLevelExp / 100) * 100;\n  const nextLevelExp = 100 - currentLevelExp;\n  \n  // Get recent achievements\n  const allAchievements = ['first-reading', 'week-streak', 'month-streak', 'first-journal', 'meditation-master', 'level-up'];\n  const unlockedAchievements = achievements;\n  \n  const handleNotificationToggle = (setting: keyof typeof notifications, value: boolean) => {\n    updateNotificationSettings({ [setting]: value });\n  };\n  \n  const handleSaveProfile = () => {\n    // Here you would save the profile data\n    setShowEditProfile(false);\n    Alert.alert('Profil mis √† jour', 'Vos informations ont √©t√© sauvegard√©es.');\n  };\n  \n  const getMotivationalMessage = () => {\n    if (stats.currentStreak >= 30) {\n      return \"Votre fid√©lit√© est exemplaire ! üåü\";\n    } else if (stats.currentStreak >= 7) {\n      return \"Excellente r√©gularit√© ! Continuez ! üî•\";\n    } else if (stats.totalReadings >= 10) {\n      return \"Votre soif spirituelle grandit ! üìñ\";\n    } else {\n      return \"Chaque pas compte dans votre parcours ! üôè\";\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {/* Profile Header */}\n      <LinearGradient\n        colors={colors.primaryGradient}\n        start={{ x: 0, y: 0 }}\n        end={{ x: 1, y: 1 }}\n        style={styles.headerGradient}\n      >\n        <View style={styles.header}>\n          <View style={styles.avatarContainer}>\n            <View style={styles.avatar}>\n              <User size={32} color={colors.white} />\n            </View>\n            <View style={styles.levelBadge}>\n              <Crown size={12} color={colors.white} />\n              <Text style={styles.levelText}>Niv. {stats.level}</Text>\n            </View>\n          </View>\n          <View style={styles.profileInfo}>\n            <View style={styles.nameContainer}>\n              <Text style={styles.profileName}>{userName}</Text>\n              <TouchableOpacity\n                style={styles.editButton}\n                onPress={() => setShowEditProfile(true)}\n              >\n                <Edit3 size={16} color={colors.white} />\n              </TouchableOpacity>\n            </View>\n            <Text style={styles.profileSubtitle}>{userBio}</Text>\n            <Text style={styles.motivationalMessage}>{getMotivationalMessage()}</Text>\n            \n            <View style={styles.experienceBar}>\n              <View style={[styles.experienceProgress, { width: `${levelProgress}%` }]} />\n            </View>\n            <Text style={styles.experienceText}>{currentLevelExp} / 100 XP ({nextLevelExp} pour le niveau suivant)</Text>\n          </View>\n          <TouchableOpacity \n            style={styles.settingsButton}\n            onPress={() => setShowSettings(!showSettings)}\n          >\n            <Settings size={20} color={colors.white} />\n          </TouchableOpacity>\n        </View>\n      </LinearGradient>\n\n      <View style={styles.content}>\n        {/* Enhanced Stats Grid */}\n        <View style={styles.statsSection}>\n          <Text style={styles.sectionTitle}>Statistiques</Text>\n          <View style={styles.statsGrid}>\n            <View style={styles.statCard}>\n              <LinearGradient colors={[colors.primary, colors.primary + 'CC']} style={styles.statGradient}>\n                <BookOpen size={20} color={colors.white} />\n                <Text style={styles.statValue}>{stats.totalReadings}</Text>\n                <Text style={styles.statLabel}>Lectures</Text>\n              </LinearGradient>\n            </View>\n            \n            <View style={styles.statCard}>\n              <LinearGradient colors={[colors.success, colors.success + 'CC']} style={styles.statGradient}>\n                <Calendar size={20} color={colors.white} />\n                <Text style={styles.statValue}>{stats.currentStreak}</Text>\n                <Text style={styles.statLabel}>S√©rie actuelle</Text>\n              </LinearGradient>\n            </View>\n            \n            <View style={styles.statCard}>\n              <LinearGradient colors={[colors.love, colors.love + 'CC']} style={styles.statGradient}>\n                <Heart size={20} color={colors.white} />\n                <Text style={styles.statValue}>{stats.totalMeditations}</Text>\n                <Text style={styles.statLabel}>M√©ditations</Text>\n              </LinearGradient>\n            </View>\n            \n            <View style={styles.statCard}>\n              <LinearGradient colors={[colors.peace, colors.peace + 'CC']} style={styles.statGradient}>\n                <MessageCircle size={20} color={colors.white} />\n                <Text style={styles.statValue}>{stats.totalJournalEntries}</Text>\n                <Text style={styles.statLabel}>Journal</Text>\n              </LinearGradient>\n            </View>\n          </View>\n        </View>\n\n        {/* Achievements Section */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Trophy size={20} color={colors.warning} />\n            <Text style={styles.sectionTitle}>R√©alisations</Text>\n            <Text style={styles.achievementCount}>({unlockedAchievements.length}/{allAchievements.length})</Text>\n          </View>\n          <View style={styles.achievementsContainer}>\n            {allAchievements.map((achievementId) => (\n              <AchievementBadge\n                key={achievementId}\n                achievementId={achievementId}\n                isUnlocked={unlockedAchievements.includes(achievementId)}\n                size=\"medium\"\n              />\n            ))}\n          </View>\n        </View>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Zap size={20} color={colors.primary} />\n            <Text style={styles.sectionTitle}>Actions rapides</Text>\n          </View>\n          <View style={styles.quickActions}>\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => Alert.alert('Export', 'Fonctionnalit√© bient√¥t disponible')}\n            >\n              <Text style={styles.quickActionText}>Exporter mes donn√©es</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.quickActionButton, styles.dangerButton]}\n              onPress={() => {\n                Alert.alert(\n                  'Effacer l\\'historique',\n                  '√ätes-vous s√ªr de vouloir effacer tout l\\'historique du chat ?',\n                  [\n                    { text: 'Annuler', style: 'cancel' },\n                    { text: 'Effacer', style: 'destructive', onPress: clearChatHistory }\n                  ]\n                );\n              }}\n            >\n              <Text style={[styles.quickActionText, styles.dangerText]}>Effacer l\\'historique</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Settings Panel */}\n        {showSettings && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Settings size={20} color={colors.textSecondary} />\n              <Text style={styles.sectionTitle}>Param√®tres</Text>\n            </View>\n            <View style={styles.settingsContainer}>\n              <View style={styles.settingItem}>\n                <View style={styles.settingLeft}>\n                  {isDarkMode ? <Moon size={20} color={colors.textSecondary} /> : <Sun size={20} color={colors.textSecondary} />}\n                  <Text style={styles.settingText}>Mode sombre</Text>\n                </View>\n                <Switch\n                  value={isDarkMode}\n                  onValueChange={toggleDarkMode}\n                  trackColor={{ false: colors.border, true: colors.primary + '50' }}\n                  thumbColor={isDarkMode ? colors.primary : colors.white}\n                />\n              </View>\n              \n              <View style={styles.settingItem}>\n                <View style={styles.settingLeft}>\n                  <Bell size={20} color={colors.textSecondary} />\n                  <Text style={styles.settingText}>Verset quotidien</Text>\n                </View>\n                <Switch\n                  value={notifications.dailyVerse}\n                  onValueChange={(value) => handleNotificationToggle('dailyVerse', value)}\n                  trackColor={{ false: colors.border, true: colors.primary + '50' }}\n                  thumbColor={notifications.dailyVerse ? colors.primary : colors.white}\n                />\n              </View>\n              \n              <View style={styles.settingItem}>\n                <View style={styles.settingLeft}>\n                  <BookOpen size={20} color={colors.textSecondary} />\n                  <Text style={styles.settingText}>Rappel de lecture</Text>\n                </View>\n                <Switch\n                  value={notifications.readingReminder}\n                  onValueChange={(value) => handleNotificationToggle('readingReminder', value)}\n                  trackColor={{ false: colors.border, true: colors.primary + '50' }}\n                  thumbColor={notifications.readingReminder ? colors.primary : colors.white}\n                />\n              </View>\n              \n              <View style={styles.settingItem}>\n                <View style={styles.settingLeft}>\n                  <Heart size={20} color={colors.textSecondary} />\n                  <Text style={styles.settingText}>Rappel m√©ditation</Text>\n                </View>\n                <Switch\n                  value={notifications.meditationReminder}\n                  onValueChange={(value) => handleNotificationToggle('meditationReminder', value)}\n                  trackColor={{ false: colors.border, true: colors.primary + '50' }}\n                  thumbColor={notifications.meditationReminder ? colors.primary : colors.white}\n                />\n              </View>\n            </View>\n          </View>\n        )}\n      </View>\n\n      {/* Edit Profile Modal */}\n      <Modal\n        visible={showEditProfile}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalHeader}>\n            <TouchableOpacity onPress={() => setShowEditProfile(false)}>\n              <Text style={styles.cancelButton}>Annuler</Text>\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Modifier le profil</Text>\n            <TouchableOpacity onPress={handleSaveProfile}>\n              <Text style={styles.saveButton}>Sauvegarder</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.modalContent}>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Nom</Text>\n              <TextInput\n                style={styles.textInput}\n                value={userName}\n                onChangeText={setUserName}\n                placeholder=\"Votre nom\"\n                placeholderTextColor={colors.textLight}\n              />\n            </View>\n\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Bio</Text>\n              <TextInput\n                style={styles.textInput}\n                value={userBio}\n                onChangeText={setUserBio}\n                placeholder=\"D√©crivez votre parcours spirituel\"\n                placeholderTextColor={colors.textLight}\n                multiline\n              />\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  headerGradient: {\n    paddingTop: spacing.lg,\n    paddingBottom: spacing.md,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: spacing.md,\n  },\n  avatarContainer: {\n    position: 'relative',\n    marginRight: spacing.md,\n  },\n  avatar: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  levelBadge: {\n    position: 'absolute',\n    bottom: -5,\n    right: -5,\n    backgroundColor: colors.warning,\n    borderRadius: 12,\n    paddingHorizontal: spacing.xs,\n    paddingVertical: 2,\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 2,\n  },\n  levelText: {\n    fontSize: typography.fontSizes.xs,\n    color: colors.white,\n    fontWeight: '600',\n  },\n  profileInfo: {\n    flex: 1,\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.xs,\n  },\n  profileName: {\n    fontSize: typography.fontSizes.lg,\n    fontWeight: '700',\n    color: colors.white,\n    marginRight: spacing.sm,\n  },\n  editButton: {\n    padding: spacing.xs,\n  },\n  profileSubtitle: {\n    fontSize: typography.fontSizes.md,\n    color: colors.white + 'CC',\n    marginBottom: spacing.xs,\n  },\n  motivationalMessage: {\n    fontSize: typography.fontSizes.sm,\n    color: colors.white + 'DD',\n    fontStyle: 'italic',\n    marginBottom: spacing.md,\n  },\n  experienceBar: {\n    height: 6,\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n    borderRadius: 3,\n    marginBottom: spacing.xs,\n  },\n  experienceProgress: {\n    height: '100%',\n    backgroundColor: colors.white,\n    borderRadius: 3,\n  },\n  experienceText: {\n    fontSize: typography.fontSizes.xs,\n    color: colors.white + 'CC',\n  },\n  settingsButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  content: {\n    padding: spacing.md,\n  },\n  statsSection: {\n    marginBottom: spacing.lg,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: spacing.sm,\n  },\n  statCard: {\n    width: '48%',\n    borderRadius: 12,\n    shadowColor: colors.black,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 3,\n  },\n  statGradient: {\n    borderRadius: 12,\n    padding: spacing.md,\n    alignItems: 'center',\n    gap: spacing.xs,\n  },\n  statValue: {\n    fontSize: typography.fontSizes.xl,\n    fontWeight: '700',\n    color: colors.white,\n  },\n  statLabel: {\n    fontSize: typography.fontSizes.sm,\n    color: colors.white + 'CC',\n    textAlign: 'center',\n  },\n  section: {\n    marginBottom: spacing.lg,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.md,\n  },\n  sectionTitle: {\n    fontSize: typography.fontSizes.lg,\n    fontWeight: '600',\n    color: colors.text,\n    marginLeft: spacing.sm,\n  },\n  achievementCount: {\n    fontSize: typography.fontSizes.sm,\n    color: colors.textSecondary,\n    marginLeft: spacing.xs,\n  },\n  achievementsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    gap: spacing.sm,\n  },\n  quickActions: {\n    gap: spacing.sm,\n  },\n  quickActionButton: {\n    backgroundColor: colors.cardSecondary,\n    borderRadius: 12,\n    padding: spacing.md,\n    alignItems: 'center',\n  },\n  dangerButton: {\n    backgroundColor: colors.error + '15',\n  },\n  quickActionText: {\n    fontSize: typography.fontSizes.md,\n    color: colors.text,\n    fontWeight: '500',\n  },\n  dangerText: {\n    color: colors.error,\n  },\n  settingsContainer: {\n    backgroundColor: colors.white,\n    borderRadius: 12,\n    overflow: 'hidden',\n  },\n  settingItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.md,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.borderLight,\n  },\n  settingLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  settingText: {\n    fontSize: typography.fontSizes.md,\n    color: colors.text,\n    marginLeft: spacing.sm,\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.md,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.borderLight,\n  },\n  cancelButton: {\n    fontSize: typography.fontSizes.md,\n    color: colors.textSecondary,\n  },\n  modalTitle: {\n    fontSize: typography.fontSizes.lg,\n    fontWeight: '600',\n    color: colors.text,\n  },\n  saveButton: {\n    fontSize: typography.fontSizes.md,\n    color: colors.primary,\n    fontWeight: '600',\n  },\n  modalContent: {\n    flex: 1,\n    padding: spacing.md,\n  },\n  inputGroup: {\n    marginBottom: spacing.lg,\n  },\n  inputLabel: {\n    fontSize: typography.fontSizes.md,\n    fontWeight: '600',\n    color: colors.text,\n    marginBottom: spacing.sm,\n  },\n  textInput: {\n    backgroundColor: colors.white,\n    borderRadius: 12,\n    padding: spacing.md,\n    fontSize: typography.fontSizes.md,\n    color: colors.text,\n    borderWidth: 1,\n    borderColor: colors.border,\n    minHeight: 50,\n  },\n});