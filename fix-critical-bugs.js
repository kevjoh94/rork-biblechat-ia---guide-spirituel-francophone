#!/usr/bin/env node

/**
 * Script de correction automatique des bugs critiques
 * BibleChat IA - Corrections prioritaires
 */

const fs = require('fs');
const path = require('path');

console.log('üîß D√©marrage des corrections automatiques...\n');

// 1. Corriger les imports manquants
const fixImports = () => {
  console.log('üì¶ Correction des imports...');
  
  const files = [
    'app/(tabs)/index.tsx',
    'app/(tabs)/chat.tsx',
    'app/(tabs)/bible.tsx',
    'app/(tabs)/profile.tsx',
    'app/(tabs)/more.tsx'
  ];
  
  files.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');
      
      // V√©rifier si React est import√©
      if (!content.includes('import React') && content.includes('React.')) {
        content = 'import React from \'react\';\n' + content;
        fs.writeFileSync(filePath, content);
        console.log(`  ‚úÖ ${file} - React import√©`);
      }
      
      // V√©rifier les imports de types
      if (content.includes('BiblicalContent') && !content.includes('import.*BiblicalContent')) {
        const importLine = 'import { BiblicalContent } from \'@/types/spiritual\';\n';
        content = content.replace(/^(import.*from.*;\n)/m, '$1' + importLine);
        fs.writeFileSync(filePath, content);
        console.log(`  ‚úÖ ${file} - Types import√©s`);
      }
    }
  });
};

// 2. Corriger les s√©lecteurs Zustand
const fixZustandSelectors = () => {
  console.log('üè™ Optimisation des s√©lecteurs Zustand...');
  
  const optimizedSelector = `
// S√©lecteur optimis√© pour √©viter les re-rendus
const useOptimizedSpiritualData = () => {
  return useSpiritualStore(
    useCallback((state) => ({
      stats: state.stats,
      dailyVerse: state.dailyVerse,
      userProfile: state.userProfile,
      achievements: state.achievements
    }), [])
  );
};`;
  
  // Ajouter le s√©lecteur optimis√© aux fichiers qui en ont besoin
  const files = ['app/(tabs)/index.tsx', 'app/(tabs)/profile.tsx'];
  
  files.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');
      
      if (!content.includes('useOptimizedSpiritualData')) {
        // Ajouter apr√®s les imports
        const importEndIndex = content.lastIndexOf('import');
        const nextLineIndex = content.indexOf('\n', importEndIndex);
        content = content.slice(0, nextLineIndex + 1) + optimizedSelector + '\n' + content.slice(nextLineIndex + 1);
        
        fs.writeFileSync(filePath, content);
        console.log(`  ‚úÖ ${file} - S√©lecteur optimis√© ajout√©`);
      }
    }
  });
};

// 3. Ajouter la gestion d'erreurs
const addErrorHandling = () => {
  console.log('üõ°Ô∏è Ajout de la gestion d\'erreurs...');
  
  const errorBoundary = `
// Error Boundary pour une meilleure stabilit√©
const withErrorBoundary = (Component) => {
  return (props) => (
    <ErrorBoundary>
      <Component {...props} />
    </ErrorBoundary>
  );
};`;
  
  // Cr√©er un fichier utilitaire pour la gestion d'erreurs
  const errorUtilsPath = path.join(__dirname, 'utils/error-handling.ts');
  const errorUtilsContent = `
import React from 'react';
import { ErrorBoundary } from '@/components/ErrorBoundary';

export const withErrorBoundary = <P extends object>(
  Component: React.ComponentType<P>
): React.ComponentType<P> => {
  return (props: P) => (
    <ErrorBoundary>
      <Component {...props} />
    </ErrorBoundary>
  );
};

export const handleAsyncError = async <T>(
  asyncFn: () => Promise<T>,
  fallback?: T
): Promise<T | undefined> => {
  try {
    return await asyncFn();
  } catch (error) {
    console.error('Async error handled:', error);
    return fallback;
  }
};

export const safeAccess = <T>(
  obj: any,
  path: string,
  defaultValue?: T
): T | undefined => {
  try {
    return path.split('.').reduce((current, key) => current?.[key], obj) ?? defaultValue;
  } catch {
    return defaultValue;
  }
};
`;
  
  fs.writeFileSync(errorUtilsPath, errorUtilsContent);
  console.log('  ‚úÖ Utilitaires de gestion d\'erreurs cr√©√©s');
};

// 4. Optimiser les performances
const optimizePerformance = () => {
  console.log('‚ö° Optimisation des performances...');
  
  const performanceUtils = `
import React, { memo, useMemo, useCallback } from 'react';

// Hook pour optimiser les re-rendus
export const useStableCallback = <T extends (...args: any[]) => any>(
  callback: T,
  deps: React.DependencyList
): T => {
  return useCallback(callback, deps);
};

// Hook pour m√©moriser les objets complexes
export const useStableObject = <T extends object>(
  factory: () => T,
  deps: React.DependencyList
): T => {
  return useMemo(factory, deps);
};

// HOC pour m√©moriser les composants
export const withMemo = <P extends object>(
  Component: React.ComponentType<P>,
  areEqual?: (prevProps: P, nextProps: P) => boolean
) => {
  return memo(Component, areEqual);
};
`;
  
  const perfUtilsPath = path.join(__dirname, 'utils/performance-optimized.ts');
  fs.writeFileSync(perfUtilsPath, performanceUtils);
  console.log('  ‚úÖ Utilitaires de performance cr√©√©s');
};

// 5. Cr√©er un guide de bonnes pratiques
const createBestPracticesGuide = () => {
  console.log('üìö Cr√©ation du guide des bonnes pratiques...');
  
  const guide = `# üéØ Guide des Bonnes Pratiques - BibleChat IA

## üèóÔ∏è Architecture

### Composants
- Utilisez \`React.memo\` pour les composants qui re-rendent souvent
- S√©parez la logique m√©tier des composants UI
- Cr√©ez des hooks personnalis√©s pour la logique r√©utilisable

### √âtat Global (Zustand)
- Utilisez des s√©lecteurs optimis√©s avec \`useCallback\`
- √âvitez les s√©lecteurs multiples dans un m√™me composant
- Pr√©f√©rez les s√©lecteurs combin√©s

### Performance
- Utilisez \`useMemo\` pour les calculs co√ªteux
- Utilisez \`useCallback\` pour les fonctions pass√©es en props
- √âvitez les objets/fonctions inline dans les props

## üé® UI/UX

### Th√®mes
- Utilisez toujours \`useTheme()\` pour les couleurs
- Testez en mode sombre et clair
- Respectez les contrastes d'accessibilit√©

### Navigation
- Utilisez \`router.back()\` pour les retours
- Ajoutez des animations de transition
- G√©rez les √©tats de chargement

### Accessibilit√©
- Ajoutez \`accessibilityLabel\` aux √©l√©ments interactifs
- Utilisez \`accessibilityRole\` appropri√©
- Testez avec un lecteur d'√©cran

## üîß D√©veloppement

### TypeScript
- Activez le mode strict
- Typez explicitement les props et √©tats
- Utilisez des interfaces plut√¥t que des types quand possible

### Tests
- √âcrivez des tests unitaires pour la logique m√©tier
- Testez les composants critiques
- Ajoutez des tests d'accessibilit√©

### Debugging
- Utilisez Flipper pour le debug
- Ajoutez des logs structur√©s
- Utilisez des Error Boundaries

## üì± Mobile

### Performance
- Optimisez les images
- Utilisez FlatList pour les listes longues
- G√©rez la m√©moire correctement

### UX Mobile
- Ajoutez des feedbacks haptiques (iOS)
- G√©rez les orientations d'√©cran
- Optimisez pour les diff√©rentes tailles d'√©cran

## üöÄ D√©ploiement

### Pr√©-d√©ploiement
- V√©rifiez tous les tests
- Testez sur diff√©rents appareils
- V√©rifiez les performances

### Monitoring
- Ajoutez des m√©triques de performance
- Surveillez les erreurs
- Collectez les feedbacks utilisateurs
`;
  
  const guidePath = path.join(__dirname, 'GUIDE_BONNES_PRATIQUES.md');
  fs.writeFileSync(guidePath, guide);
  console.log('  ‚úÖ Guide des bonnes pratiques cr√©√©');
};

// Ex√©cution du script
const main = async () => {
  try {
    fixImports();
    fixZustandSelectors();
    addErrorHandling();
    optimizePerformance();
    createBestPracticesGuide();
    
    console.log('\nüéâ Corrections automatiques termin√©es !');
    console.log('\nüìã Prochaines √©tapes manuelles :');
    console.log('1. V√©rifier les imports ajout√©s');
    console.log('2. Tester les s√©lecteurs optimis√©s');
    console.log('3. Impl√©menter les Error Boundaries');
    console.log('4. Ajouter les tests unitaires');
    console.log('5. Optimiser les composants lourds');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des corrections :', error);
  }
};

main();